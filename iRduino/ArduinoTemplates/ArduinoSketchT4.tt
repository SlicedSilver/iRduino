<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="ArduinoInterfaces" #>
<#
	var numberTm1640S = 0;
    var tm1640UnitNumbers = new List<int>();
    for (var m = 0; m < configurationOptions.DisplayUnitConfigurations.Count; m++)
    {
        if (configurationOptions.DisplayUnitConfigurations[m].IsTM1640)
        {
            tm1640UnitNumbers.Add(m);
            numberTm1640S += 1;
        }
    }
	string temp = "";
	int numberTM1638 = configurationOptions.DisplayUnitConfigurations.Count - numberTm1640S;
	int messageLengthInt = 0;
	string serialSpeed = configurationOptions.SerialPortSpeed;
	switch (configurationOptions.DisplayUnitConfigurations.Count)
	{
		case 1:
			temp = "single (1)";
			messageLengthInt = 16;
			break;
		case 2:
			temp = "double (2)";
			messageLengthInt = 27;
			break;
		case 3:
			temp = "triple (3)";
			messageLengthInt = 38;
			break;
		case 4:
			temp = "quadruple (4)";
			messageLengthInt = 49;
			break;
		case 5:
			temp = "quintuple (5)";
			messageLengthInt = 60;
			break;
		case 6:
			temp = "sextuple (6)";
			messageLengthInt = 71;
			break;
	}
    string messageReadUnitCheck = "";
	var count = 0;
        for (var p = 0; p < configurationOptions.DisplayUnitConfigurations.Count; p++)
        {
            if (configurationOptions.DisplayUnitConfigurations[p].IsTM1640)
            {
                if (count != 0)
                {
                    messageReadUnitCheck += " || ";
                }
                messageReadUnitCheck += string.Format("u=={0}", p + 1);
                count++;
            }
        }
        if (count == 0)
        {
            messageReadUnitCheck += "false";
        }
#>
/*
iRduino - Arduino Sketch
 Author: Mark Silverwood
 
 Using TM1638 library from Ricardo Batista <rjbatista at gmail dot com>
 
 This Arduino Sketch interfaces to the iRduino windows application.
 This Sketch was generated on: <#= DateTime.Now.ToShortDateString() #>
 This Sketch is for a <#= temp #> Display Unit Configuration
 
 */

<#
 bool normal = false;
            bool inverted = false;
            foreach (var unit in configurationOptions.DisplayUnitConfigurations)
            {
                if (unit.Inverted)
                {
                    inverted = true;
                }
                else
                {
                    normal = true;
                }
            }
            if (numberTM1638 > 0)
            {
                if (normal)
                {
#>
#include <TM1638.h>
<#
                }
                if (inverted)
                {
#>
#include <InvertedTM1638.h>
<#
                }
            }
            if (numberTm1640S > 0)
            {
#>
#include <TM1640.h>
<#
            }
 #>

//////Setup Here
<# if (numberTM1638 > 0)
 { #>
#define dataPin <#= pins.DataPin#>
#define clockPin <#= pins.ClockPin#>
<# }  #>
<#
	int tmCount = 0;
    for (var p = 0; p < configurationOptions.DisplayUnitConfigurations.Count; p++)
    {
        if (!configurationOptions.DisplayUnitConfigurations[p].IsTM1640)
        {
#>
#define strobePin<#= p + 1 #> <#= pins.UnitStrobePins[p] #>
<#
        }
        else
        {
#>
#define TM1640dataPin<#= p + 1 #> <#= pins.TM1640DataPins[tmCount] #>
#define TM1640clockPin<#= p + 1 #> <#= pins.TM1640ClockPins[tmCount] #>
<#
            tmCount++;
        }
    }
#>
#define NumberUnits <#= configurationOptions.DisplayUnitConfigurations.Count #>
#define NumberTM1638Units <#= configurationOptions.DisplayUnitConfigurations.Count - numberTm1640S #>
//////Setup Finished

#define startByte1 <#= Constants.MessageStartByte1#>
#define endByte <#= Constants.MessageEndByte#>
#define messageBufferSize 32

<#
for (var p = 0; p < configurationOptions.DisplayUnitConfigurations.Count; p++)
{
    if (configurationOptions.DisplayUnitConfigurations[p].IsTM1640)
    {
#>
TM1640 module<#= p + 1 #>(TM1640dataPin<#= p + 1 #>,TM1640clockPin<#= p + 1 #>,false,0);
<#
    }
    else
    {
        if (!configurationOptions.DisplayUnitConfigurations[p].Inverted)
        {
#>
TM1638 module<#= p + 1 #>(dataPin,clockPin,strobePin<#= p + 1 #>,false,0);
<#
        }
        else
        {
#>
InvertedTM1638 module<#= p + 1 #>(dataPin,clockPin,strobePin<#= p + 1 #>,false,0);
<#
        }
    }
}
#>

//// Variable Declarations
word leds; 
byte segments[8], TM1640segments[16], redLeds, greenLeds, intensity, unit, sum, i, readCount, checkerPosition;
byte buttons[NumberTM1638Units], oldbuttons[NumberTM1638Units], lastButtonSend[NumberTM1638Units];
long lastCheck, debounceDelay = 100;
boolean sendButtons = false;
byte messageHolder[messageBufferSize], md[messageBufferSize], messageLength, messageID, messagePosition = -1;

void setup() {
	Serial.begin(<#= serialSpeed #>);
	for(int u = 0; u < NumberTM1638Units; u++)
	{
		oldbuttons[u] = 0;
	}
	intensity = 0;
	lastCheck = millis();
}

void loop() {
	buttonsCheck();
	if (Serial.available() > 0){
		messagePosition++;
		if(messagePosition == messageBufferSize) messagePosition = 0;
		messageHolder[messagePosition] = Serial.read();
		messageChecker();
	}
}

void messageChecker()
{
	if(messageHolder[messagePosition] != endByte) return; //end byte
	checkerPosition = (messagePosition == 0) ? messageBufferSize-1 : messagePosition - 1;
	messageLength = messageHolder[checkerPosition]; //messageLength
	if(checkerPosition >= messageLength + 3)
	{
		checkerPosition = checkerPosition - messageLength - 3;
	}
	else
	{
		checkerPosition = checkerPosition + messageBufferSize - messageLength - 3;
	}
	if(messageHolder[checkerPosition]!= startByte1) return; //start byte1
	checkerPosition++;
	messageExtract(messageLength);
}

void messageExtract(byte _length)
{
	sum = 0;
	readCount = 0;
	while (readCount <= _length)
	{
		if(checkerPosition == messageBufferSize) checkerPosition = 0;
		md[readCount] = messageHolder[checkerPosition];
		sum += messageHolder[checkerPosition];
		readCount++;
		checkerPosition++;
	}
	if(checkerPosition == messageBufferSize) checkerPosition = 0;
	if(sum == messageHolder[checkerPosition])
	{
		switch(md[0])
		{
			case 37: TMString(md);
				break;
			case 42: TMLED(md);
				break;
			case 170: Clear(md);
				break;
		}
	}
}

void TMString(byte _md[])
{
	i = 1;
	intensity = _md[i++];
	for(byte u = 1; u <= NumberUnits; u++)
	{
		if(<#= messageReadUnitCheck #>) //checks for TM1640
		{
			for(byte x = 0; x < 16; x++){
				TM1640segments[x] = _md[i++];
			}
			updateTMDisplay(u,TM1640segments,intensity);
		}
		else
		{
			for(byte x = 0; x < 8; x++){
				segments[x] = _md[i++];
			}
			updateTMDisplay(u,segments,intensity);
		}
	}
}

void TMLED(byte _md[])
{
	i = 1;
	intensity = _md[i++];
	for(byte u = 1; u <= NumberTM1638Units; u++){
		greenLeds = _md[i++];
		redLeds = _md[i++];
		updateTMLEDs(u,word(greenLeds,redLeds),intensity);
	}
}

void Clear(byte _md[])
{
	if(_md[1] == 170 && _md[2] == 170)
	{
		ClearEverything();
	}
}

void ClearEverything(){

<#
	for (var p = 0; p < configurationOptions.DisplayUnitConfigurations.Count; p++)
	{
		if (configurationOptions.DisplayUnitConfigurations[p].IsTM1640)
		{
#>
		module<#= p + 1#>.setupDisplay(true,0);
		module<#= p + 1#>.setDisplayToString("                ");
		module<#= p + 1#>.setLEDs(0);
<#
		}
		else
		{
#>
		module<#= p + 1#>.setupDisplay(true,0);
		module<#= p + 1#>.setDisplayToString("        ");
		module<#= p + 1#>.setLEDs(0);
<#
		}
	}
#>
}


void buttonsCheck(){
	if ((millis() - lastCheck)<debounceDelay) return;
	lastCheck = millis();
<#
	int buttonCount = 0;
	for (var p = 0; p < configurationOptions.DisplayUnitConfigurations.Count; p++)
	{
		if (!configurationOptions.DisplayUnitConfigurations[p].IsTM1640)
		{
#>
	buttons[<#= buttonCount #>] = module<#= p + 1 #>.getButtons();
<#
			buttonCount++;
		}
	}
#>
	sendButtons = false;
	for(int u = 0; u < NumberTM1638Units; u++)
	{
		if (buttons[u] != lastButtonSend[u] && buttons[u] != oldbuttons[u]){
			sendButtons = true;
		}
		oldbuttons[u] = buttons[u];
	}
	if(sendButtons){
		Serial.write(startByte1);
        Serial.write(55); //Message ID
        sum = 55;
		for(int u = 0; u < NumberTM1638Units; u++)
		{
			lastButtonSend[u] = buttons[u];
			Serial.write(lastButtonSend[u]);
            sum += lastButtonSend[u];
		}
        Serial.write(sum); //checksum
        Serial.write(NumberTM1638Units);
        Serial.write(endByte);
	}
}

void updateTMDisplay(byte _unit, byte _segments[], byte _intensity){
	switch(_unit){
<#
	for (var p = 0; p < configurationOptions.DisplayUnitConfigurations.Count; p++)
	{
		if (configurationOptions.DisplayUnitConfigurations[p].IsTM1640)
		{
#>
		case <#= p + 1#>:
		module<#= p + 1#>.setupDisplay(true,_intensity);
		module<#= p + 1#>.setDisplay(_segments,16);
		break;
<#
		}
		else
		{
#>
		case <#= p + 1#>:
		module<#= p + 1#>.setupDisplay(true,_intensity);
		module<#= p + 1#>.setDisplay(_segments);
		break;
<#
		}
	}
#>
  }
}

void updateTMLEDs(byte _unit, word _leds, byte _intensity){
	switch(_unit){
<#
	int x = 0;
	for (var p = 0; p < configurationOptions.DisplayUnitConfigurations.Count; p++)
	{
		if (!configurationOptions.DisplayUnitConfigurations[p].IsTM1640)
		{
		x++;
#>
		case <#= x #>:
		module<#= x #>.setupDisplay(true,_intensity);
		module<#= x #>.setLEDs(_leds);
		break;
<#
		}
	}
#>
  }
}