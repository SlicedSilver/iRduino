// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace iRduino.ArduinoTemplates
{
    using System.Collections.Generic;
    using System.Globalization;
    using ArduinoInterfaces;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class ArduinoSketchT4 : ArduinoSketchT4Base
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 5 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"

	var numberTm1640S = 0;
    var tm1640UnitNumbers = new List<int>();
    for (var m = 0; m < configurationOptions.DisplayUnitConfigurations.Count; m++)
    {
        if (configurationOptions.DisplayUnitConfigurations[m].IsTM1640)
        {
            tm1640UnitNumbers.Add(m);
            numberTm1640S += 1;
        }
    }
	string temp = "";
	int numberTM1638 = configurationOptions.DisplayUnitConfigurations.Count - numberTm1640S;
	int messageLengthInt = 0;
	string serialSpeed = configurationOptions.SerialPortSpeed;
	switch (configurationOptions.DisplayUnitConfigurations.Count)
	{
		case 1:
			temp = "single (1)";
			messageLengthInt = 16;
			break;
		case 2:
			temp = "double (2)";
			messageLengthInt = 27;
			break;
		case 3:
			temp = "triple (3)";
			messageLengthInt = 38;
			break;
		case 4:
			temp = "quadruple (4)";
			messageLengthInt = 49;
			break;
		case 5:
			temp = "quintuple (5)";
			messageLengthInt = 60;
			break;
		case 6:
			temp = "sextuple (6)";
			messageLengthInt = 71;
			break;
	}
    string messageReadUnitCheck = "";
	var count = 0;
        for (var p = 0; p < configurationOptions.DisplayUnitConfigurations.Count; p++)
        {
            if (configurationOptions.DisplayUnitConfigurations[p].IsTM1640)
            {
                if (count != 0)
                {
                    messageReadUnitCheck += " || ";
                }
                messageReadUnitCheck += string.Format("u=={0}", p + 1);
                count++;
            }
        }
        if (count == 0)
        {
            messageReadUnitCheck += "false";
        }

            
            #line default
            #line hidden
            this.Write("/*\r\niRduino - Arduino Sketch\r\n Author: Mark Silverwood\r\n \r\n Using TM1638 library " +
                    "from Ricardo Batista <rjbatista at gmail dot com>\r\n \r\n This Arduino Sketch inter" +
                    "faces to the iRduino windows application.\r\n This Sketch was generated on: ");
            
            #line 73 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToShortDateString()));
            
            #line default
            #line hidden
            this.Write("\r\n This Sketch is for a ");
            
            #line 74 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(temp));
            
            #line default
            #line hidden
            this.Write(" Display Unit Configuration\r\n \r\n */\r\n\r\n");
            
            #line 78 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"

 bool normal = false;
            bool inverted = false;
            foreach (var unit in configurationOptions.DisplayUnitConfigurations)
            {
                if (unit.Inverted)
                {
                    inverted = true;
                }
                else
                {
                    normal = true;
                }
            }
            if (numberTM1638 > 0)
            {
                if (normal)
                {

            
            #line default
            #line hidden
            this.Write("#include <TM1638.h>\r\n");
            
            #line 98 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"

                }
                if (inverted)
                {

            
            #line default
            #line hidden
            this.Write("#include <InvertedTM1638.h>\r\n");
            
            #line 104 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"

                }
            }
            if (numberTm1640S > 0)
            {

            
            #line default
            #line hidden
            this.Write("#include <TM1640.h>\r\n");
            
            #line 111 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"

            }
 
            
            #line default
            #line hidden
            this.Write("\r\n//////Setup Here\r\n");
            
            #line 116 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
 if (numberTM1638 > 0)
 { 
            
            #line default
            #line hidden
            this.Write("#define dataPin ");
            
            #line 118 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pins.DataPin));
            
            #line default
            #line hidden
            this.Write("\r\n#define clockPin ");
            
            #line 119 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pins.ClockPin));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 120 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
 }  
            
            #line default
            #line hidden
            
            #line 121 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"

	int tmCount = 0;
    for (var p = 0; p < configurationOptions.DisplayUnitConfigurations.Count; p++)
    {
        if (!configurationOptions.DisplayUnitConfigurations[p].IsTM1640)
        {

            
            #line default
            #line hidden
            this.Write("#define strobePin");
            
            #line 128 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p + 1));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 128 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pins.UnitStrobePins[p]));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 129 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"

        }
        else
        {

            
            #line default
            #line hidden
            this.Write("#define TM1640dataPin");
            
            #line 134 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p + 1));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 134 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pins.TM1640DataPins[tmCount]));
            
            #line default
            #line hidden
            this.Write("\r\n#define TM1640clockPin");
            
            #line 135 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p + 1));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 135 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pins.TM1640ClockPins[tmCount]));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 136 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"

            tmCount++;
        }
    }

            
            #line default
            #line hidden
            this.Write("#define NumberUnits ");
            
            #line 141 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(configurationOptions.DisplayUnitConfigurations.Count));
            
            #line default
            #line hidden
            this.Write("\r\n#define NumberTM1638Units ");
            
            #line 142 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(configurationOptions.DisplayUnitConfigurations.Count - numberTm1640S));
            
            #line default
            #line hidden
            this.Write("\r\n//////Setup Finished\r\n\r\n#define startByte1 ");
            
            #line 145 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Constants.MessageStartByte1));
            
            #line default
            #line hidden
            this.Write("\r\n#define endByte ");
            
            #line 146 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Constants.MessageEndByte));
            
            #line default
            #line hidden
            this.Write("\r\n#define messageBufferSize 32\r\n\r\n");
            
            #line 149 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"

for (var p = 0; p < configurationOptions.DisplayUnitConfigurations.Count; p++)
{
    if (configurationOptions.DisplayUnitConfigurations[p].IsTM1640)
    {

            
            #line default
            #line hidden
            this.Write("TM1640 module");
            
            #line 155 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p + 1));
            
            #line default
            #line hidden
            this.Write("(TM1640dataPin");
            
            #line 155 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p + 1));
            
            #line default
            #line hidden
            this.Write(",TM1640clockPin");
            
            #line 155 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p + 1));
            
            #line default
            #line hidden
            this.Write(",false,0);\r\n");
            
            #line 156 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"

    }
    else
    {
        if (!configurationOptions.DisplayUnitConfigurations[p].Inverted)
        {

            
            #line default
            #line hidden
            this.Write("TM1638 module");
            
            #line 163 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p + 1));
            
            #line default
            #line hidden
            this.Write("(dataPin,clockPin,strobePin");
            
            #line 163 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p + 1));
            
            #line default
            #line hidden
            this.Write(",false,0);\r\n");
            
            #line 164 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"

        }
        else
        {

            
            #line default
            #line hidden
            this.Write("InvertedTM1638 module");
            
            #line 169 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p + 1));
            
            #line default
            #line hidden
            this.Write("(dataPin,clockPin,strobePin");
            
            #line 169 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p + 1));
            
            #line default
            #line hidden
            this.Write(",false,0);\r\n");
            
            #line 170 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"

        }
    }
}

            
            #line default
            #line hidden
            this.Write(@"
//// Variable Declarations
word leds; 
byte segments[8], TM1640segments[16], redLeds, greenLeds, intensity, unit, sum, i, readCount, checkerPosition;
byte buttons[NumberTM1638Units], oldbuttons[NumberTM1638Units], lastButtonSend[NumberTM1638Units];
long lastCheck, debounceDelay = 100;
boolean sendButtons = false;
byte messageHolder[messageBufferSize], md[messageBufferSize], messageLength, messageID, messagePosition = -1;

void setup() {
	Serial.begin(");
            
            #line 185 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(serialSpeed));
            
            #line default
            #line hidden
            this.Write(");\r\n\tfor(int u = 0; u < NumberTM1638Units; u++)\r\n\t{\r\n\t\toldbuttons[u] = 0;\r\n\t}\r\n\ti" +
                    "ntensity = 0;\r\n\tlastCheck = millis();\r\n}\r\n\r\nvoid loop() {\r\n\tbuttonsCheck();\r\n\tif" +
                    " (Serial.available() > 0){\r\n\t\tmessagePosition++;\r\n\t\tif(messagePosition == messag" +
                    "eBufferSize) messagePosition = 0;\r\n\t\tmessageHolder[messagePosition] = Serial.rea" +
                    "d();\r\n\t\tmessageChecker();\r\n\t}\r\n}\r\n\r\nvoid messageChecker()\r\n{\r\n\tif(messageHolder[" +
                    "messagePosition] != endByte) return; //end byte\r\n\tcheckerPosition = (messagePosi" +
                    "tion == 0) ? messageBufferSize-1 : messagePosition - 1;\r\n\tmessageLength = messag" +
                    "eHolder[checkerPosition]; //messageLength\r\n\tif(checkerPosition >= messageLength " +
                    "+ 3)\r\n\t{\r\n\t\tcheckerPosition = checkerPosition - messageLength - 3;\r\n\t}\r\n\telse\r\n\t" +
                    "{\r\n\t\tcheckerPosition = checkerPosition + messageBufferSize - messageLength - 3;\r" +
                    "\n\t}\r\n\tif(messageHolder[checkerPosition]!= startByte1) return; //start byte1\r\n\tch" +
                    "eckerPosition++;\r\n\tmessageExtract(messageLength);\r\n}\r\n\r\nvoid messageExtract(byte" +
                    " _length)\r\n{\r\n\tsum = 0;\r\n\treadCount = 0;\r\n\twhile (readCount <= _length)\r\n\t{\r\n\t\ti" +
                    "f(checkerPosition == messageBufferSize) checkerPosition = 0;\r\n\t\tmd[readCount] = " +
                    "messageHolder[checkerPosition];\r\n\t\tsum += messageHolder[checkerPosition];\r\n\t\trea" +
                    "dCount++;\r\n\t\tcheckerPosition++;\r\n\t}\r\n\tif(checkerPosition == messageBufferSize) c" +
                    "heckerPosition = 0;\r\n\tif(sum == messageHolder[checkerPosition])\r\n\t{\r\n\t\tswitch(md" +
                    "[0])\r\n\t\t{\r\n\t\t\tcase 37: TMString(md);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 42: TMLED(md);\r\n\t\t\t\tbr" +
                    "eak;\r\n\t\t\tcase 170: Clear(md);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid TMString(byte _md[" +
                    "])\r\n{\r\n\ti = 1;\r\n\tintensity = _md[i++];\r\n\tfor(byte u = 1; u <= NumberUnits; u++)\r" +
                    "\n\t{\r\n\t\tif(");
            
            #line 255 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(messageReadUnitCheck));
            
            #line default
            #line hidden
            this.Write(@") //checks for TM1640
		{
			for(byte x = 0; x < 16; x++){
				TM1640segments[x] = _md[i++];
			}
			updateTMDisplay(u,TM1640segments,intensity);
		}
		else
		{
			for(byte x = 0; x < 8; x++){
				segments[x] = _md[i++];
			}
			updateTMDisplay(u,segments,intensity);
		}
	}
}

void TMLED(byte _md[])
{
	i = 1;
	intensity = _md[i++];
	for(byte u = 1; u <= NumberTM1638Units; u++){
		greenLeds = _md[i++];
		redLeds = _md[i++];
		updateTMLEDs(u,word(greenLeds,redLeds),intensity);
	}
}

void Clear(byte _md[])
{
	if(_md[1] == 170 && _md[2] == 170)
	{
		ClearEverything();
	}
}

void ClearEverything(){

");
            
            #line 293 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"

	for (var p = 0; p < configurationOptions.DisplayUnitConfigurations.Count; p++)
	{
		if (configurationOptions.DisplayUnitConfigurations[p].IsTM1640)
		{

            
            #line default
            #line hidden
            this.Write("\t\tmodule");
            
            #line 299 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p + 1));
            
            #line default
            #line hidden
            this.Write(".setupDisplay(true,0);\r\n\t\tmodule");
            
            #line 300 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p + 1));
            
            #line default
            #line hidden
            this.Write(".setDisplayToString(\"                \");\r\n\t\tmodule");
            
            #line 301 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p + 1));
            
            #line default
            #line hidden
            this.Write(".setLEDs(0);\r\n");
            
            #line 302 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"

		}
		else
		{

            
            #line default
            #line hidden
            this.Write("\t\tmodule");
            
            #line 307 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p + 1));
            
            #line default
            #line hidden
            this.Write(".setupDisplay(true,0);\r\n\t\tmodule");
            
            #line 308 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p + 1));
            
            #line default
            #line hidden
            this.Write(".setDisplayToString(\"        \");\r\n\t\tmodule");
            
            #line 309 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p + 1));
            
            #line default
            #line hidden
            this.Write(".setLEDs(0);\r\n");
            
            #line 310 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"

		}
	}

            
            #line default
            #line hidden
            this.Write("}\r\n\r\n\r\nvoid buttonsCheck(){\r\n\tif ((millis() - lastCheck)<debounceDelay) return;\r\n" +
                    "\tlastCheck = millis();\r\n");
            
            #line 320 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"

	int buttonCount = 0;
	for (var p = 0; p < configurationOptions.DisplayUnitConfigurations.Count; p++)
	{
		if (!configurationOptions.DisplayUnitConfigurations[p].IsTM1640)
		{

            
            #line default
            #line hidden
            this.Write("\tbuttons[");
            
            #line 327 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(buttonCount));
            
            #line default
            #line hidden
            this.Write("] = module");
            
            #line 327 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p + 1));
            
            #line default
            #line hidden
            this.Write(".getButtons();\r\n");
            
            #line 328 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"

			buttonCount++;
		}
	}

            
            #line default
            #line hidden
            this.Write(@"	sendButtons = false;
	for(int u = 0; u < NumberTM1638Units; u++)
	{
		if (buttons[u] != lastButtonSend[u] && buttons[u] != oldbuttons[u]){
			sendButtons = true;
		}
		oldbuttons[u] = buttons[u];
	}
	if(sendButtons){
		Serial.write(startByte1);
        Serial.write(55); //Message ID
        sum = 55;
		for(int u = 0; u < NumberTM1638Units; u++)
		{
			lastButtonSend[u] = buttons[u];
			Serial.write(lastButtonSend[u]);
            sum += lastButtonSend[u];
		}
        Serial.write(sum); //checksum
        Serial.write(NumberTM1638Units);
        Serial.write(endByte);
	}
}

void updateTMDisplay(byte _unit, byte _segments[], byte _intensity){
	switch(_unit){
");
            
            #line 359 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"

	for (var p = 0; p < configurationOptions.DisplayUnitConfigurations.Count; p++)
	{
		if (configurationOptions.DisplayUnitConfigurations[p].IsTM1640)
		{

            
            #line default
            #line hidden
            this.Write("\t\tcase ");
            
            #line 365 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p + 1));
            
            #line default
            #line hidden
            this.Write(":\r\n\t\tmodule");
            
            #line 366 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p + 1));
            
            #line default
            #line hidden
            this.Write(".setupDisplay(true,_intensity);\r\n\t\tmodule");
            
            #line 367 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p + 1));
            
            #line default
            #line hidden
            this.Write(".setDisplay(_segments,16);\r\n\t\tbreak;\r\n");
            
            #line 369 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"

		}
		else
		{

            
            #line default
            #line hidden
            this.Write("\t\tcase ");
            
            #line 374 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p + 1));
            
            #line default
            #line hidden
            this.Write(":\r\n\t\tmodule");
            
            #line 375 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p + 1));
            
            #line default
            #line hidden
            this.Write(".setupDisplay(true,_intensity);\r\n\t\tmodule");
            
            #line 376 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p + 1));
            
            #line default
            #line hidden
            this.Write(".setDisplay(_segments);\r\n\t\tbreak;\r\n");
            
            #line 378 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"

		}
	}

            
            #line default
            #line hidden
            this.Write("  }\r\n}\r\n\r\nvoid updateTMLEDs(byte _unit, word _leds, byte _intensity){\r\n\tswitch(_u" +
                    "nit){\r\n");
            
            #line 387 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"

	int x = 0;
	for (var p = 0; p < configurationOptions.DisplayUnitConfigurations.Count; p++)
	{
		if (!configurationOptions.DisplayUnitConfigurations[p].IsTM1640)
		{
		x++;

            
            #line default
            #line hidden
            this.Write("\t\tcase ");
            
            #line 395 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x));
            
            #line default
            #line hidden
            this.Write(":\r\n\t\tmodule");
            
            #line 396 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x));
            
            #line default
            #line hidden
            this.Write(".setupDisplay(true,_intensity);\r\n\t\tmodule");
            
            #line 397 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x));
            
            #line default
            #line hidden
            this.Write(".setLEDs(_leds);\r\n\t\tbreak;\r\n");
            
            #line 399 "C:\Users\Mark\Documents\GitHub\iRduino\iRduino\ArduinoTemplates\ArduinoSketchT4.tt"

		}
	}

            
            #line default
            #line hidden
            this.Write("  }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class ArduinoSketchT4Base
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
